#!/usr/bin/python
# Copyright (c) 2018 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.


import cps
import cps_utils
import socket
import netaddr as net
import cps_object
import bytearray_utils as ba_utils
import argparse
from opx_tools.opx_config_utils import *


def get_ports(vrf):
    obj=cps_object.CPSObject('base-ip/ipv4', data={'base-ip/ipv4/vrf-name':vrf})
    port_list=[]
    l=[]
    cps.get([obj.get()],l)
    for i in l:
            port_list.append(str(i['data']['base-ip/ipv4/name']))	
    print "\nVRF:",vrf
    ports=[ ba_utils.ba_to_str(i, len(i)) for i in port_list ]
    print "\nPorts:",
    for i in xrange(0, len(ports), 5):
        print '\t'+', '.join(str(j) for j in ports[i:i+5])

def get_vrf_names():
    obj=cps_object.CPSObject('ni/network-instances') 	
    l=[]
    vrf_list=[]
    cps.get([obj.get()],l)
    for i in l:
        vrf=i['data']['ni/network-instances/network-instance/name']
        vrf_list.append(ba_utils.ba_to_str(vrf,len(vrf)))
    return [ ba_utils.ba_to_str(i, len(i)) for i in vrf_list ]

def get_all_details():    
    vrf_list=get_vrf_names()
    for vrf in vrf_list:
        get_vrf_details(vrf)
        print "\n**********************************************"

def get_vrf_details(vrf):
    get_ports(vrf)

def verify_vrf_exists(vrf):
    vrf_list = get_vrf_names()
    if vrf not in vrf_list:
	print "Given vrf does not exist"
	sys.exit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='show vrf')
    parser.add_argument("--name", help="view specific VRF details")
    parser.add_argument("--list", help="list VRF names", action='store_true',  default=False)

    args = parser.parse_args()
    if args.name==None and args.list==False:
        get_all_details()
    if args.name:
        verify_vrf_exists(args.name)
        get_vrf_details(args.name)
    if args.list:
        print "VRFs:",str(get_vrf_names()).strip('[]')

