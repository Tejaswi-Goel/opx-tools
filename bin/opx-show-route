#!/usr/bin/python
# Copyright (c) 2018 Dell Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
# LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
# FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
#
# See the Apache Version 2.0 License for specific language governing
# permissions and limitations under the License.


import cps
import cps_utils
import socket
import netaddr as net
import cps_object
import bytearray_utils as ba_utils
import argparse
from opx_tools.opx_config_utils import *
import subprocess
import re


def vrf_view_routes(vrf):
    print "\nVRF:",vrf
    l=[]
    result=[]
    obj=cps_object.CPSObject('base-route/obj/entry', data={'base-route/obj/vrf-name':vrf})
    cps.get([obj.get()],l)
    for i in l:
        data=i['data']
        nh_list=[]
        nh_list_key='base-route/obj/entry/nh-list'
        dst_address=get_ip_addr_str(str(data['base-route/obj/entry/route-prefix']))
        prefix_len=ba_utils.from_ba(data['base-route/obj/entry/prefix-len'], 'uint8_t')
        dst_address=dst_address+"/"+str(prefix_len)
        try:
            for key in data[nh_list_key]:
                nh_addr=(get_ip_addr_str(str(data[nh_list_key][key]['base-route/obj/entry/nh-list/nh-addr'])))+' '
                iface=(str(data[nh_list_key][key]['base-route/obj/entry/nh-list/ifname']))
                nh_vrf_name=(str(data['base-route/obj/entry/nh-vrf-name']))
                nh_list.append(nh_addr+" dev "+iface)
        except:
            nh_addr='None'; nh_vrf_name=None;iface='None'
            nh_list.append(nh_addr+" dev "+iface)
        for nh_str in nh_list:
            result += [[dst_address,nh_str,nh_vrf_name]]
    return result

def get_vrf_names():
    obj=cps_object.CPSObject('ni/network-instances')
    l=[]
    vrf_list=[]
    cps.get([obj.get()],l)
    for i in l:
        vrf=i['data']['ni/network-instances/network-instance/name']
        vrf=ba_utils.ba_to_str(vrf,len(vrf))
        vrf_list.append(vrf)
    return vrf_list

def get_ip_addr_str(data):
    try:
        return ba_utils.ba_to_ipv4str('', data)
    except:
        return ba_utils.ba_to_ipv6str('', data)

def get_all_routes():
    result=[]
    vrf_list=get_vrf_names()
    for vrf in vrf_list:
        get_vrf_routes(vrf)

def get_vrf_routes(vrf):
    result= vrf_view_routes(vrf)
    print_summary(["Dest","Next hop","Next hop VRF"],result,[None, None, None,None])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Display static routes', formatter_class=argparse.RawTextHelpFormatter)
    parser.epilog="Example:\n(1)opx-show-route --vrf_name default\n(2)opx-show-route"
    parser.add_argument("--vrf_name", help="view specific VRF routes")
    args = parser.parse_args()
    vrf=args.vrf_name
    if vrf == None:
        get_all_routes()
    else:
        get_vrf_routes(vrf)
